//time complexity O(n)????
//space complexity O(n*k)
 public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        combine(res,new ArrayList<Integer>(),1,n,k);
        return res;
    }
    public static void combine(List<List<Integer>> res,List<Integer>row,int start,int n,int k){
        if(k==0){
            res.add(new ArrayList<Integer>(row));
            return;
        }
        for(int i=start;i<=n;i++){
            row.add(i);
            combine(res,row,i+1,n,k-1);
            row.remove(row.size()-1);
        }
    }
/*for this problem ,it is a really classic backtracking problem,first we can calculate C(n,k) to determine
how many ways we need to consider.And use a single for loop to maintain the first number,and call the 
recursive function to get the second or the third one by the perimeter k.
and we need to get back when k==0,and add row to the res and return
and remove row.size()-1.
so we can avoid the repetition.
1-2,1-3,1-4
row.remove(n)  n is the n-1th item in the array
*/
