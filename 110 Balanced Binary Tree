/*Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node 
never differ by more than 1.

*/
//time complexity O(logn)
//space complexity O(1)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(theDiff(root)==-1){
            return false;
        }
        return true;
    }
    public int theDiff(TreeNode root){
        if(root==null){
            return 0;
        }
       int depthleft=theDiff(root.left);
      if(depthleft==-1){
          return -1;
      }
      int depthright=theDiff(root.right);
      if(depthright==-1){
          return -1;
      }
        int diff=Math.abs(depthleft-depthright);
        if(diff>1){
            return -1;
        }
        return Math.max(depthleft,depthright)+1;
    }
}
/*for this problem,we need to use DFS and recursion to get the depth of the tree.For each recursion,every subtree,get the depth of the left
and the right.And we can creat a method theDiff to determine whether it is balanced.Using -1 to mark the tree is not balanced.And if one of 
the subtree is marked by -1,the program will stop to recursive and go to the main method.
*/
