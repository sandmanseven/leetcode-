public List<List<String>> solveNQueens(int n) {
        List<List<String>> res=new ArrayList<List<String>>();
        String [][] queen=new String[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                queen[i][j]=".";
            }
        }
        
        solveNQueen(res,queen,0,n);
        return res;
    }
    private void solveNQueen(List<List<String>>res,String[][]queen,int row,int n){
       if(row==n){
           List<String> list = new ArrayList<String>();
           
          for(int i=0;i<n;i++){
              String s="";
            for(int j=0;j<n;j++){
               s+=queen[i][j];
               
            }
             list.add(s);
        }
           res.add(list);
           return;
       }
       for(int col=0;col!=n;++col){
           if(isValid(queen,row,col,n)){
               queen[row][col]="Q";
               solveNQueen(res,queen,row+1,n);
               queen[row][col]=".";
           }
       }
    }
    private boolean isValid(String[][] queen,int row,int col,int n){
        //check if the column has a queen before.
        for(int i=0;i!=row;i++){
            if(queen[i][col]=="Q"){
                return false;
            }
        }
        //check if the 45 diagonal had a queen //before
        for(int i=row-1,j=col-1;i>=0&&j>=0;--i,--j){
            if(queen[i][j]=="Q"){
                return false;
            }
        }
        //check if the 135 diagonal had a queen //before
        for(int i=row-1,j=col+1;i>=0&&j<n;--i,++j){
            if(queen[i][j]=="Q"){
                return false;
        }
    }
    return true;
}
